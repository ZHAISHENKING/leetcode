/**
 * 插入排序：
 *
 * 内外两层循环对应两个区域——已排序、未排序，已排序区域初始只有 arr[0]
 * 外层循环每次取一个值item，和已排序区域自后向前进行比较，
 * 比item大的向后移动，比item小的跳出内层循环，移动结束。记录此时j的位置，把item插入后边
 *
 * @param arr
 * @returns {*}
 */
function sort(arr) {
  const l = arr.length
  for (let i = 1; i < l; ++i) {
    let item = arr[i]
    let j = i - 1
    for (; j >= 0; --j) {
      if (arr[j] > item) {
        arr[j + 1] = arr[j]
      } else {
        break
      }
    }
    let str = `第${i}次排序 插入前：${arr.toString()}`
    arr[j + 1] = item
    str += ` 插入后：${arr.toString()}`
    console.log(str)
  }
  return arr
}

console.log(`结果：` + sort([10,2,3,6,4,1,5]))
// 第1次排序 插入前：10,10,3,6,4,1,5 插入后：2,10,3,6,4,1,5
// 第2次排序 插入前：2,10,10,6,4,1,5 插入后：2,3,10,6,4,1,5
// 第3次排序 插入前：2,3,10,10,4,1,5 插入后：2,3,6,10,4,1,5
// 第4次排序 插入前：2,3,6,6,10,1,5 插入后：2,3,4,6,10,1,5
// 第5次排序 插入前：2,2,3,4,6,10,5 插入后：1,2,3,4,6,10,5
// 第6次排序 插入前：1,2,3,4,6,6,10 插入后：1,2,3,4,5,6,10
// 结果：1,2,3,4,5,6,10
// 看的出来 一次插入一个，需要插入l-1次，